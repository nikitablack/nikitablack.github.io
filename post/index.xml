<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Here should be the blog Title</title>
    <link>http://nikitablack.github.io/post/</link>
    <description>Recent content in Posts on Here should be the blog Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;http://nikitablack.github.io/&#34;&gt;nikitablack&lt;/a&gt; 2021</copyright>
    <lastBuildDate>Thu, 14 Aug 2025 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://nikitablack.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hello, Neural Network!</title>
      <link>http://nikitablack.github.io/post/hello_neural_network/</link>
      <pubDate>Thu, 14 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/hello_neural_network/</guid>
      <description>I don&amp;rsquo;t remember when AI became a big thing. It didn&amp;rsquo;t happen suddenly, but it did happen fast. Three or four years ago, my friend - a big AI fan but not a programmer - told me he didn’t need to learn programming languages because ChatGPT could write programs. I asked him to create a simple ping-pong game with it; the language didn’t matter. He couldn’t - the tool didn’t understand what he wanted, produced incorrect code, and it was impossible to tell it to fix just that specific part.</description>
    </item>
    
    <item>
      <title>Vulkan with rust by example 6. Depth buffer.</title>
      <link>http://nikitablack.github.io/post/vulkan_with_rust_by_example_6_fixing_depth/</link>
      <pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/vulkan_with_rust_by_example_6_fixing_depth/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;https://nikitablack.github.io/post/vulkan_with_rust_by_example_5_drawing/&#34;&gt;previous step&lt;/a&gt;, we finally got our first image. But unfortunately, it was broken - the polygons were drawn in the incorrect order. I omit the depth buffer management to make the complex Vulkan a little bit simpler. Also, I wanted to show how to change the existing renderer. With all the knowledge we have, it should be quite simple.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vulkan with rust by example 5. Drawing.</title>
      <link>http://nikitablack.github.io/post/vulkan_with_rust_by_example_5_drawing/</link>
      <pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/vulkan_with_rust_by_example_5_drawing/</guid>
      <description>&lt;p&gt;Today we&amp;rsquo;ll fight with the final boss and save the princess. We&amp;rsquo;ll finally see our teapot on the screen.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vulkan with rust by example 4. Swapchain.</title>
      <link>http://nikitablack.github.io/post/vulkan_with_rust_by_example_4_swapchain/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/vulkan_with_rust_by_example_4_swapchain/</guid>
      <description>&lt;p&gt;At this point, we have shaders, static data is uploaded to the GPU, the pipelines are set up, and we&amp;rsquo;re almost ready to start to draw. Except that we don&amp;rsquo;t have an image where we can draw. An image is just memory, and this entire step is dedicated to these special images for drawing - swapchain images.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vulkan with rust by example 3. Pipelines.</title>
      <link>http://nikitablack.github.io/post/vulkan_with_rust_by_example_3_pipelines/</link>
      <pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/vulkan_with_rust_by_example_3_pipelines/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;https://nikitablack.github.io/post/vulkan_with_rust_by_example_2_resources/&#34;&gt;previous step&lt;/a&gt; we uploaded the data to the GPU, but we still don&amp;rsquo;t know how to use it. Today we&amp;rsquo;ll fill that gap partially. We need to tell &lt;code&gt;Vulkan&lt;/code&gt; upfront which resources we&amp;rsquo;re going to use for a particular effect. We do it via pipelines.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vulkan with rust by example 2. Resources.</title>
      <link>http://nikitablack.github.io/post/vulkan_with_rust_by_example_2_resources/</link>
      <pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/vulkan_with_rust_by_example_2_resources/</guid>
      <description>&lt;p&gt;We have 4 shaders we created in the &lt;a href=&#34;https://nikitablack.github.io/post/vulkan_with_rust_by_example_1_shaders/&#34;&gt;previous step&lt;/a&gt;, but these are useless until we feed GPU data. Let&amp;rsquo;s look at the picture to recall which kind of resources we need.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vulkan with rust by example 1. Shaders.</title>
      <link>http://nikitablack.github.io/post/vulkan_with_rust_by_example_1_shaders/</link>
      <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/vulkan_with_rust_by_example_1_shaders/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;https://nikitablack.github.io/post/vulkan_with_rust_by_example_0_introduction/&#34;&gt;previous lesson&lt;/a&gt;, we made all necessary preparations to start exploring &lt;code&gt;Vulkan&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vulkan with Rust by example 0. Introduction.</title>
      <link>http://nikitablack.github.io/post/vulkan_with_rust_by_example_0_introduction/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/vulkan_with_rust_by_example_0_introduction/</guid>
      <description>&lt;p&gt;Hi everybody. Today I&amp;rsquo;d like to talk about &lt;code&gt;Vulkan&lt;/code&gt; - the modern API for communication with a GPU device. Though there&amp;rsquo;re already tons of information and tutorials on the web I&amp;rsquo;m writing this tutorial for several reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I don&amp;rsquo;t want this series to be about general usage of the API. Instead, I want to focus on a single purpose application, more or less &lt;em&gt;complex&lt;/em&gt;, &lt;em&gt;not&lt;/em&gt; just a triangle, and explain how everything works by looking at a concrete example.&lt;/li&gt;
&lt;li&gt;Instead of &lt;code&gt;C&lt;/code&gt;/&lt;code&gt;C++&lt;/code&gt;, I want to try &lt;code&gt;Rust&lt;/code&gt; programming language because at the moment of writing there&amp;rsquo;s simply no information about the subject.&lt;/li&gt;
&lt;li&gt;The popular tutorials are a bit outdated. No, they are great and work fine, but &lt;code&gt;Vulkan&lt;/code&gt; evolves, and new features and paradigms appear with time.&lt;/li&gt;
&lt;li&gt;I want to understand &lt;code&gt;Vulkan&lt;/code&gt; better. And, as you know, trying to explain something helps to understand it better.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>How to use Vulkan Timestamp Queries.</title>
      <link>http://nikitablack.github.io/post/how_to_use_vulkan_timestamp_queries/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/how_to_use_vulkan_timestamp_queries/</guid>
      <description>&lt;p&gt;At some point in my development life, I decided that I want to know how fast my GPU can crack the tasks I throw at it. And if you read this then you probably want to know it too. I expect that you know that measure a GPU time on the CPU makes no sense since CPU and GPU are two different processors and if you place &lt;code&gt;std::chrono::some_clock::now()&lt;/code&gt; before and after a draw call it will always give you a time near to zero. Luckily Vulkan provides a tool to make time snapshots - the so-called &lt;strong&gt;Queries&lt;/strong&gt;. There’re multiple different query types but today we’ll talk about &lt;strong&gt;Timestamp Queries&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How I organize data in a functional style</title>
      <link>http://nikitablack.github.io/post/how_i_organize_data_in_functional_style/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/how_i_organize_data_in_functional_style/</guid>
      <description>&lt;p&gt;This article serves as a basement for my future posts. Here I explain how I manage data flow in a functional application.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Functional programming in c&#43;&#43; by example</title>
      <link>http://nikitablack.github.io/post/functional_programming_in_c&#43;&#43;_by_example/</link>
      <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/functional_programming_in_c&#43;&#43;_by_example/</guid>
      <description>&lt;p&gt;Functional programming (&lt;em&gt;FP&lt;/em&gt;) is popular these days. Articles, books, blogs. Every conference has a couple of talks about the beauty of functional approach. I looked at it from the side for a long time and now I want to try it in practice. After I dug a lot through the theory I decided to write a small application in a functional style. I&amp;rsquo;ll take a code from my &lt;a href=&#34;http://nikitablack.github.io/post/data_oriented_design_by_example/&#34;&gt;previous article&lt;/a&gt; so the example will be a 2D physics simulation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Data Oriented Design by example</title>
      <link>http://nikitablack.github.io/post/data_oriented_design_by_example/</link>
      <pubDate>Thu, 02 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/data_oriented_design_by_example/</guid>
      <description>&lt;p&gt;The last couple of years interesting but not so popular paradigm appears more often. I’m talking about Data Oriented Design (DOD). If you’re searching for a job that involves high-performance calculations be ready to hear corresponding questions. And I was surprised knowing that some my colleagues have never heard about the approach and after the short discussion stayed skeptical. In this article I’ll try to compare traditional OOP approach with DOD on a real world example.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DirectX 12 by example</title>
      <link>http://nikitablack.github.io/post/directx_12_by_example/</link>
      <pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/directx_12_by_example/</guid>
      <description>&lt;h4 id=&#34;disclaimer&#34;&gt;Disclaimer!&lt;/h4&gt;
&lt;p&gt;I&amp;rsquo;m not an expert, computer graphics is my hobby. When I started to learn directx 12 I already was quite comfortable with directx 11 but it was still difficult to switch. And even after several months of investigations I still have a feeling that I just scratched a surface. I&amp;rsquo;m constantly learning and this post is a syncronization of my thoughts. I found that attempts to explain complex things makes me understand these things better. Thought the artile was written by me for me I hope you&amp;rsquo;ll find it useful too.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::function - to bind or not to bind?</title>
      <link>http://nikitablack.github.io/post/std_function_to_bind_or_not_to_bind/</link>
      <pubDate>Tue, 24 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/std_function_to_bind_or_not_to_bind/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;http://nikitablack.github.io/post/std_function_as_delegate/&#34;&gt;previous post&lt;/a&gt; about delegates I wrote how to bind a member function to &lt;code&gt;std::function&lt;/code&gt;. There was a lot of template magic involved in order to pass the correct number of &lt;a href=&#34;http://en.cppreference.com/w/cpp/utility/functional/placeholders&#34;&gt;placeholders&lt;/a&gt;. Shortly after I published I received a lot of feedback and I&amp;rsquo;m very grateful for this. One advice was not to use &lt;a href=&#34;http://en.cppreference.com/w/cpp/utility/functional/bind&#34;&gt;&lt;code&gt;std::bind()&lt;/code&gt;&lt;/a&gt; at all.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::function as delegate</title>
      <link>http://nikitablack.github.io/post/std_function_as_delegate/</link>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/std_function_as_delegate/</guid>
      <description>&lt;p&gt;After my &lt;a href=&#34;http://nikitablack.github.io/post/generic_c++_delegates/&#34;&gt;previous&lt;/a&gt; post some people asked why did I invent what was invented already? Why did I try to write another &lt;a href=&#34;http://en.cppreference.com/w/cpp/utility/functional/function&#34;&gt;&lt;code&gt;std::function&lt;/code&gt;&lt;/a&gt;? Well, from the begining I planed to compare custom and standard approach. So here we are.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generic C&#43;&#43; delegates</title>
      <link>http://nikitablack.github.io/post/generic_c&#43;&#43;_delegates/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/generic_c&#43;&#43;_delegates/</guid>
      <description>&lt;p&gt;I like modular programming - the style where each separate part of the functionality knows nothing about any other part. But the modules need to communicate with each other somehow.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Call a function from the string name and arguments</title>
      <link>http://nikitablack.github.io/post/call_a_function_from_the_string_name_and_arguments/</link>
      <pubDate>Sun, 21 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nikitablack.github.io/post/call_a_function_from_the_string_name_and_arguments/</guid>
      <description>&lt;p&gt;Recently I had an interesting task on my work - a cheat system for a game. All the system should do is to call functions during apllication run with console commands (game console). Functions can accept different number of arguments with different types.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>